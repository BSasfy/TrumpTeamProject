package commandline;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

//ATTENTION! human player is deactivated and numberOfPlayers == 2 at break. 

//DONE now add all cards to the Player the winnerCard belongs to.
// DONE pass active status (firstPlayer?)
// DONE how do we know if someone is eliminated?
// DONE program crashes if all chosenAttribute values are equal where we determine "max"
// DONE write statistics - each game
// DONE find a way to draw that arrow pointing to the winning category in the winner card like in the example document on moodle. 
// DONE IMPORTANT what happens if its a draw?
// DONE Exception Handling needed for Player Class humanChooseAttribute(), if they enter numbers other than 1 or 5, if they enter something other than an int, etc.
/* IMPORTANT implement: Do you want to see past results or play a game?
			*1: Print Game Statistics
			*2: Play game*/
// IMPORTANT Implement game statistics - database
/*Gold Plating: change some of the card values so there are no exactly
// identical ones? Maybe come up with new card names for the ones that are repeated? At least some of them?
 records need to be a string*/
//	create more methods to structure the code better. 
// double check class, method, array and attribute names based on Java Naming Convention. 
// find a way to diplay it only once when a player is out of the game, not every round. 

public class GamePlay {

	List<List> shuffledDeck = new ArrayList<List>();
	List<List> playerDeck = new ArrayList<List>();
	List<List> AIDeck1 = new ArrayList<List>();
	List<List> AIDeck2 = new ArrayList<List>();
	List<List> AIDeck3 = new ArrayList<List>();
	List<List> AIDeck4 = new ArrayList<List>();

	List<List> winnersDeck;

	Player human;
	Player AI1;
	Player AI2;
	Player AI3;
	Player AI4;

	int dcount = 0;
	int roundNumber = 0;

	Object activePlayer;
	Object winner;

	DeckInAndShuffle cardsIn;
	String[] attributeNames;
	Database db = new Database();

	int numberOfHumanWins = 0;
	int numberOfAI1Wins = 0;
	int numberOfAI2Wins = 0;
	int numberOfAI3Wins = 0;
	int numberOfAI4Wins = 0;

	public GamePlay(DeckInAndShuffle d, Player humanPlayer, Player aI1, Player aI2, Player aI3, Player aI4) {
		cardsIn = d;
		human = humanPlayer;
		AI1 = aI1;
		AI2 = aI2;
		AI3 = aI3;
		AI4 = aI4;

		human.setName("You");
		AI1.setName("AI1");
		AI2.setName("AI2");
		AI3.setName("AI3");
		AI4.setName("AI4");

	}

	void playgame() throws IOException {
		int chosenAttribute = 0;

		cardsIn.setUpDeck();
		shuffledDeck = cardsIn.getStartDeck();
		dealDeck();
		activePlayer = getActivePlayer();
		List<List> cardsInGame = new ArrayList<List>();

		int numberOfPlayers;
		// human.setIsStillInGame(false);
		System.out.println("Game Start");
		int j = 0;

		attributeNames = cardsIn.getFieldNames();

		while (true) {
			j++;
			roundNumber++;
			System.out.println("Round " + j);

			// play cards
			// winner = null;
			cardsInGame.clear();
			numberOfPlayers = 5;

			if (human.isStillInGame) {
				cardsInGame.add(playerDeck.get(0));
			}
			if (AI1.isStillInGame) {
				cardsInGame.add(AIDeck1.get(0));
			}
			if (AI2.isStillInGame) {
				cardsInGame.add(AIDeck2.get(0));
			}
			if (AI3.isStillInGame) {
				cardsInGame.add(AIDeck3.get(0));
			}
			if (AI4.isStillInGame) {
				cardsInGame.add(AIDeck4.get(0));
			}

			System.out.println("Round " + j + ": Players have drawn their cards.");
			if (human.isStillInGame) {
				System.out.println("You drew the '" + playerDeck.get(0).get(0) + "':");
				System.out.println("    >" + attributeNames[1] + ": " + playerDeck.get(0).get(1) + "\n    >"
						+ attributeNames[2] + ": " + playerDeck.get(0).get(2) + "\n    >" + attributeNames[3] + ": "
						+ playerDeck.get(0).get(3) + "\n    >" + attributeNames[4] + ": " + playerDeck.get(0).get(4)
						+ "\n    >" + attributeNames[5] + ": " + playerDeck.get(0).get(5));
				System.out.println("There are " + playerDeck.size() + " cards in your deck.");
			}

			// display card and choose attribute

			System.out.println(
					((Player) activePlayer).getName() + "! It's your turn to select a category! The categories are: ");
			for (int i = 1; i < attributeNames.length; i++) { // i=1 as the first element of categories is "Description"
																// referring to the card names.
				System.out.println(i + ": " + attributeNames[i]);
			}

			if ((Player) activePlayer == human) {
				chosenAttribute = ((Player) activePlayer).humanChooseAttribute();
			} else if ((Player) activePlayer == AI1) {
				((Player) activePlayer).setCurrentCard(AIDeck1.get(0));
				chosenAttribute = ((Player) activePlayer).AIChooseAttribute();
			} else if ((Player) activePlayer == AI2) {
				((Player) activePlayer).setCurrentCard(AIDeck2.get(0));
				chosenAttribute = ((Player) activePlayer).AIChooseAttribute();
			} else if ((Player) activePlayer == AI3) {
				((Player) activePlayer).setCurrentCard(AIDeck3.get(0));
				chosenAttribute = ((Player) activePlayer).AIChooseAttribute();
			} else if ((Player) activePlayer == AI4) {
				((Player) activePlayer).setCurrentCard(AIDeck4.get(0));
				chosenAttribute = ((Player) activePlayer).AIChooseAttribute();
			}

			System.out.println("The attribute you chose is: " + chosenAttribute);

			// compare cards
			List<List> winnerCard = null;
			int max = 0;
			try {
				for (int i = 0; i < cardsInGame.size(); i++) { // is looping uncontrollably?

					if (((int) cardsInGame.get(i).get(chosenAttribute)) > max) {
						max = (int) cardsInGame.get(i).get(chosenAttribute);
						winnerCard = cardsInGame.get(i);
					}

					if (((int) cardsInGame.get(i).get(chosenAttribute)) == max) {
						max = (int) cardsInGame.get(i).get(chosenAttribute);
						winnerCard = cardsInGame.get(i);
						dcount++;
					}
				}
				if (human.isStillInGame && winnerCard == playerDeck.get(0)) {
					winner = human;
					winnersDeck = playerDeck;
					numberOfHumanWins++;
				} else if (AI1.isStillInGame && winnerCard == AIDeck1.get(0)) {
					winner = AI1;
					winnersDeck = AIDeck1;
					numberOfAI1Wins++;
				} else if (AI2.isStillInGame && winnerCard == AIDeck2.get(0)) {
					winner = AI2;
					winnersDeck = AIDeck2;
					numberOfAI2Wins++;
				} else if (AI3.isStillInGame && winnerCard == AIDeck3.get(0)) {
					winner = AI3;
					winnersDeck = AIDeck3;
					numberOfAI3Wins++;
				} else if (AI4.isStillInGame && winnerCard == AIDeck4.get(0)) {
					winner = AI4;
					winnersDeck = AIDeck4;
					numberOfAI4Wins++;
				}

				System.out.println("This was round " + j + ". The winner is: " + ((Player) winner).getName() + ".");
				System.out.println("The winning card was: " + winnerCard.get(0));
				if (chosenAttribute == 1) {
					System.out.println("    >" + attributeNames[1] + ": " + winnerCard.get(1) + " <==");
				} else if (chosenAttribute != 1) {
					System.out.println("    >" + attributeNames[1] + ": " + winnerCard.get(1));
				}
				if (chosenAttribute == 2) {
					System.out.println("    >" + attributeNames[2] + ": " + winnerCard.get(2) + " <==");
				}

				else if (chosenAttribute != 2) {
					System.out.println("    >" + attributeNames[2] + ": " + winnerCard.get(2));
				}
				if (chosenAttribute == 3) {
					System.out.println("    >" + attributeNames[3] + ": " + winnerCard.get(3) + " <==");
				} else if (chosenAttribute != 3) {
					System.out.println("    >" + attributeNames[3] + ": " + winnerCard.get(3));
				}
				if (chosenAttribute == 4) {
					System.out.println("    >" + attributeNames[4] + ": " + winnerCard.get(4) + " <==");
				} else if (chosenAttribute != 4) {
					System.out.println("    >" + attributeNames[4] + ": " + winnerCard.get(4));
				}
				if (chosenAttribute == 5) {
					System.out.println("    >" + attributeNames[5] + ": " + winnerCard.get(5) + " <==");
				} else if (chosenAttribute != 5) {
					System.out.println("    >" + attributeNames[5] + ": " + winnerCard.get(5));
				}

				if (human.isStillInGame == true) {
					playerDeck.remove(playerDeck.get(0));
				}

				if (AI1.isStillInGame == true) {
					AIDeck1.remove(AIDeck1.get(0));
				}

				if (AI2.isStillInGame == true) {
					AIDeck2.remove(AIDeck2.get(0));
				}

				if (AI3.isStillInGame == true) {
					AIDeck3.remove(AIDeck3.get(0));
				}

				if (AI4.isStillInGame == true) {
					AIDeck4.remove(AIDeck4.get(0));
				}

				Collections.shuffle(cardsInGame);

				for (int i = 0; i < cardsInGame.size(); i++) {
					winnersDeck.add(cardsInGame.get(i));
				}

				// passing activePlayer status
				activePlayer = winner;

				// find a way for this to get displayed only once? Maybe just Gold Plating.
				if (playerDeck.isEmpty()) {
					human.setIsStillInGame(false);
					System.out.println("Human is out of the game");
					numberOfPlayers--;

				}
				if (AIDeck1.isEmpty()) {
					AI1.setIsStillInGame(false);
					System.out.println("AI1 is out of the game");
					numberOfPlayers--;
				}
				if (AIDeck2.isEmpty()) {
					AI2.setIsStillInGame(false);
					System.out.println("AI2 is out of the game");
					numberOfPlayers--;
				}
				if (AIDeck3.isEmpty()) {
					AI3.setIsStillInGame(false);
					System.out.println("AI3 is out of the game");
					numberOfPlayers--;
				}
				if (AIDeck4.isEmpty()) {
					AI4.setIsStillInGame(false);
					System.out.println("AI4 is out of the game");
					numberOfPlayers--;
				}
				System.out.println(numberOfPlayers);
				if (numberOfPlayers == 1) {
					break;
				}
				// Thread.sleep(2000); optional

			} catch (Exception e) {

				j--;
				try {
					System.out.println("You did not enter a number between 1-5");

					Thread.sleep(2000);

					System.out.println("Please enter a number between 1-5");
					Thread.sleep(2000);
					// TODO Auto-generated catch block
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			continue;
		}

		System.out.println("Game End.");
		System.out.println("The overall winner is: " + ((Player) winner).getName() + ". Congratulations!");
		System.out.println("Scores: " + "\n    " + human.getName() + ":" + numberOfHumanWins + "\n    " + AI1.getName()
				+ ":" + numberOfAI1Wins + "\n    " + AI2.getName() + ":" + numberOfAI2Wins + "\n    " + AI3.getName()
				+ ":" + numberOfAI3Wins + "\n    " + AI4.getName() + ":" + numberOfAI4Wins);

		db.setGameRecord(1);

		if(((Player) winner) ==human) 
		{
			db.sethumanWinRecord(1);
		}
		else 
		{
		db.setaiWinRecord(1);
		}
		db.setaverageDraws(dcount);
		
		db.setlongestGame(j);

	}

	Object getActivePlayer() {
		Random rand = new Random();

		int activePlayer = rand.nextInt(4);

		if (activePlayer == 0) {
			return human;
		} else if (activePlayer == 1) {
			return AI1;
		} else if (activePlayer == 2) {
			return AI2;
		} else if (activePlayer == 3) {
			return AI3;
		} else {
			return AI4;
		}
	}

	private void dealDeck() {
		for (int i = 0; i < 8; i++) {
			playerDeck.add(shuffledDeck.get(i));
		}

		for (int i = 8; i < 16; i++) {
			AIDeck1.add(shuffledDeck.get(i));
		}

		for (int i = 16; i < 24; i++) {
			AIDeck2.add(shuffledDeck.get(i));
		}

		for (int i = 24; i < 32; i++) {
			AIDeck3.add(shuffledDeck.get(i));
		}

		for (int i = 32; i < 40; i++) {
			AIDeck4.add(shuffledDeck.get(i));
		}
	}
	
	
	// Relevant getters 
	public String activePlayer() {
		return ((Player) activePlayer).getName();
	}
	public int getRoundNumber() {
		return roundNumber;
	}
	
	public String getWinner() {
		return ((Player) winner).getName();
		
	}

	public List<List> getPlayerDeck() {
		return playerDeck;
	}

	public void setPlayerDeck(List<List> playerDeck) {
		this.playerDeck = playerDeck;
	}

	public List<List> getAIDeck1() {
		return AIDeck1;
	}

	public void setAIDeck1(List<List> AIDeck1) {
		AIDeck1 = AIDeck1;
	}

	public List<List> getAIDeck2() {
		return AIDeck2;
	}

	public void setAIDeck2(List<List> AIDeck2) {
		AIDeck2 = AIDeck2;
	}

	public List<List> getAIDeck4() {
		return AIDeck4;
	}

	public void setAIDeck4(List<List> AIDeck4) {
		AIDeck4 = AIDeck4;
	}

	public List<List> getAIDeck3() {
		return AIDeck3;
	}

	public void setAIDeck3(List<List> AIDeck3) {
		AIDeck3 = AIDeck3;
	}
}
}
