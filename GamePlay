package commandline;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class GamePlay {

	// records need to be a string //
	List<List> playerDeck = new ArrayList<List>(); // Why was it <Card>? //Changed from ArrayList to List to be able to
													// use subLists
	List<List> AIDeck1;
	List<List> AIDeck2 = new ArrayList<List>();
	List<List> AIDeck3 = new ArrayList<List>();
	List<List> AIDeck4 = new ArrayList<List>();
	
	List<List> winnersDeck;

	Player human;
	Player AI1;
	Player AI2;
	Player AI3;
	Player AI4;

	Object activePlayer;
	Object winner;

	DeckInAndShuffle cardsIn;

	public GamePlay(DeckInAndShuffle d, Player humanPlayer, Player aI1, Player aI2, Player aI3, Player aI4) {
		cardsIn = d;
		human = humanPlayer;
		AI1 = aI1;
		AI2 = aI2;
		AI3 = aI3;
		AI4 = aI4;

		human.setName("Human");
		AI1.setName("AI1");
		AI2.setName("AI2");
		AI3.setName("AI3");
		AI4.setName("AI4");

	}

	void playgame() throws IOException {
		int chosenAttribute;

		cardsIn.setUpDeck();
		dealDeck();
		activePlayer = getActivePlayer();
		int j = 0; //so that we avoid the problem of having to remove items from the array, carsInGame.add(playerDeck.get(i));
		while(true) { //change true to while players are still in game or something similar.
		// deal cards
			List<List> cardsInGame = new ArrayList<List>();
			cardsInGame.add(playerDeck.get(0));// will it overwrite if we add cards to indexes 0-3 upon draw.
			cardsInGame.add(AIDeck1.get(0));
			cardsInGame.add(AIDeck2.get(0));
			cardsInGame.add(AIDeck3.get(0));
			cardsInGame.add(AIDeck4.get(0));
	
			// display card and choose attribute
			System.out.println("Human Player, your card is: ");
			System.out.println(playerDeck.get(0));
	
			System.out.println(((Player) activePlayer).getName() + "! It's your turn!");
	
			if ((Player) activePlayer == human) {
				chosenAttribute = ((Player) activePlayer).humanChooseAttribute();
			} else {
				chosenAttribute = ((Player) activePlayer).AIChooseAttribute();
			} // Exception Handling needed, if they enter numbers other than 1 or 5, if they
				// enter something other than an int, etc.
	
			System.out.println("The attribute you chose is: " + chosenAttribute);
	
			// compare cards
			List<List> winnerCard = null;
			int max = 0;
	
			for (int i = 0; i < cardsInGame.size(); i++) {
				if ((int) cardsInGame.get(i).get(chosenAttribute) > max) {
					max = (int) cardsInGame.get(i).get(chosenAttribute);
					winnerCard = cardsInGame.get(i);
					if (i == 0) {
						winner = human;
						winnersDeck = playerDeck;
					} else if (i == 1) {
						winner = AI1;
						winnersDeck = AIDeck1;
					} else if (i == 2) {
						winner = AI2;
						winnersDeck = AIDeck2;
					} else if (i == 3) {
						winner = AI3;
						winnersDeck = AIDeck3;
					} else if (i == 4) {
						winner = AI4;
						winnersDeck = AIDeck4;
					}
				}
			}
	
			// remove cards from decks and add it all to winners
			System.out.println("The cards played in this round were: " + cardsInGame); // checkpoint, delete in final
			System.out.println("The winning card is: " + winnerCard);
			System.out.println("The winner is: " + ((Player) winner).getName());
			
			
			/*playerDeck.remove(0); //when we remove does everything shift up one?
			AIDeck1.remove(0);
			AIDeck2.remove(0);
			AIDeck3.remove(0);
			AIDeck4.remove(0);*/
			
			Collections.shuffle(cardsInGame);
			winnersDeck.add(cardsInGame);
			
			
			//passing activePlayer status
			activePlayer = winner;
		}
		
		
		

		// now add all cards to the Player the winnerCard belongs to.
		// pass active status (firstPlayer?)
		// how do we know if someone is eliminated?
		// write statistics
		// what happens if its a draw?
		// Gold Plating: change some of the card values so there are no exactly identical ones? Maybe come up with new card names for the ones that are repeated? At least some of them?
		
		

	}

	Object getActivePlayer() {
		Random rand = new Random();

		int activePlayer = rand.nextInt(4);

		if (activePlayer == 0) {
			return human;
		} else if (activePlayer == 1) {
			return AI1;
		} else if (activePlayer == 2) {
			return AI2;
		} else {
			return AI3;
		}
	}

	private void dealDeck() {
		playerDeck = cardsIn.getStartDeck().subList(0, 7);
		AIDeck1 = cardsIn.getStartDeck().subList(8, 15);
		AIDeck2 = cardsIn.getStartDeck().subList(16, 23);
		AIDeck3 = cardsIn.getStartDeck().subList(24, 31);
		AIDeck4 = cardsIn.getStartDeck().subList(32, 39);
	}

	void setPlayerDeck(List<List> dealtPlayerDeck) {
		playerDeck = dealtPlayerDeck;
	}

	void setAI1Deck(List<List> dealtAI1Deck) {
		AIDeck1 = dealtAI1Deck;
	}

	void setAI2Deck(List<List> dealtAI2Deck) {
		AIDeck2 = dealtAI2Deck;
	}

	void setAI3Deck(List<List> dealtAI3Deck) {
		AIDeck3 = dealtAI3Deck;
	}

}
